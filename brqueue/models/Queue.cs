// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: queue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace brqueue {

  /// <summary>Holder for reflection information generated from queue.proto</summary>
  public static partial class QueueReflection {

    #region Descriptor
    /// <summary>File descriptor for queue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtxdWV1ZS5wcm90byJcCg5FbnF1ZXVlUmVxdWVzdBIPCgdtZXNzYWdlGAEg",
            "ASgMEhsKCHByaW9yaXR5GAIgASgOMgkuUHJpb3JpdHkSHAoUcmVxdWlyZWRD",
            "YXBhYmlsaXRpZXMYAyADKAkiHQoPRW5xdWV1ZVJlc3BvbnNlEgoKAmlkGAEg",
            "ASgJIkMKClBvcFJlcXVlc3QSHQoVYXZhaWxhYmxlQ2FwYWJpbGl0aWVzGAEg",
            "AygJEhYKDndhaXRGb3JNZXNzYWdlGAIgASgIIj0KC1BvcFJlc3BvbnNlEhEK",
            "CWhhZFJlc3VsdBgDIAEoCBIPCgdtZXNzYWdlGAEgASgMEgoKAmlkGAIgASgJ",
            "IiAKEkFja25vd2xlZGdlUmVxdWVzdBIKCgJpZBgBIAEoCSIVChNBY2tub3ds",
            "ZWRnZVJlc3BvbnNlIhYKFExpc3RGdWxsUXVldWVSZXF1ZXN0IlwKFUxpc3RG",
            "dWxsUXVldWVSZXNwb25zZRIUCgxzZWdtZW50SW5kZXgYASABKAUSDwoHbWVz",
            "c2FnZRgDIAEoDBIKCgJpZBgEIAEoCRIQCghmaW5pc2hlZBgFIAEoCCIgCg1F",
            "cnJvclJlc3BvbnNlEg8KB21lc3NhZ2UYASABKAkixgEKDlJlcXVlc3RXcmFw",
            "cGVyEg0KBXJlZklkGAogASgFEiIKB2VucXVldWUYASABKAsyDy5FbnF1ZXVl",
            "UmVxdWVzdEgAEhoKA3BvcBgCIAEoCzILLlBvcFJlcXVlc3RIABIqCgthY2tu",
            "b3dsZWRnZRgDIAEoCzITLkFja25vd2xlZGdlUmVxdWVzdEgAEi4KDWxpc3RG",
            "dWxsUXVldWUYBCABKAsyFS5MaXN0RnVsbFF1ZXVlUmVxdWVzdEgAQgkKB21l",
            "c3NhZ2Ui7AEKD1Jlc3BvbnNlV3JhcHBlchINCgVyZWZJZBgKIAEoBRIjCgdl",
            "bnF1ZXVlGAEgASgLMhAuRW5xdWV1ZVJlc3BvbnNlSAASGwoDcG9wGAIgASgL",
            "MgwuUG9wUmVzcG9uc2VIABIrCgthY2tub3dsZWRnZRgDIAEoCzIULkFja25v",
            "d2xlZGdlUmVzcG9uc2VIABIfCgVlcnJvchgEIAEoCzIOLkVycm9yUmVzcG9u",
            "c2VIABIvCg1saXN0RnVsbFF1ZXVlGAUgASgLMhYuTGlzdEZ1bGxRdWV1ZVJl",
            "c3BvbnNlSABCCQoHbWVzc2FnZSodCghQcmlvcml0eRIHCgNMT1cQABIICgRI",
            "SUdIEAFCE1oHYnJxdWV1ZaoCB2JycXVldWViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::brqueue.Priority), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.EnqueueRequest), global::brqueue.EnqueueRequest.Parser, new[]{ "Message", "Priority", "RequiredCapabilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.EnqueueResponse), global::brqueue.EnqueueResponse.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.PopRequest), global::brqueue.PopRequest.Parser, new[]{ "AvailableCapabilities", "WaitForMessage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.PopResponse), global::brqueue.PopResponse.Parser, new[]{ "HadResult", "Message", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.AcknowledgeRequest), global::brqueue.AcknowledgeRequest.Parser, new[]{ "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.AcknowledgeResponse), global::brqueue.AcknowledgeResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.ListFullQueueRequest), global::brqueue.ListFullQueueRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.ListFullQueueResponse), global::brqueue.ListFullQueueResponse.Parser, new[]{ "SegmentIndex", "Message", "Id", "Finished" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.ErrorResponse), global::brqueue.ErrorResponse.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.RequestWrapper), global::brqueue.RequestWrapper.Parser, new[]{ "RefId", "Enqueue", "Pop", "Acknowledge", "ListFullQueue" }, new[]{ "Message" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::brqueue.ResponseWrapper), global::brqueue.ResponseWrapper.Parser, new[]{ "RefId", "Enqueue", "Pop", "Acknowledge", "Error", "ListFullQueue" }, new[]{ "Message" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Priority {
    [pbr::OriginalName("LOW")] Low = 0,
    [pbr::OriginalName("HIGH")] High = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Puts a new message in the queue
  /// </summary>
  public sealed partial class EnqueueRequest : pb::IMessage<EnqueueRequest> {
    private static readonly pb::MessageParser<EnqueueRequest> _parser = new pb::MessageParser<EnqueueRequest>(() => new EnqueueRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnqueueRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueRequest(EnqueueRequest other) : this() {
      message_ = other.message_;
      priority_ = other.priority_;
      requiredCapabilities_ = other.requiredCapabilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueRequest Clone() {
      return new EnqueueRequest(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// The actual task to enqueue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 2;
    private global::brqueue.Priority priority_ = 0;
    /// <summary>
    /// The priority of the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.Priority Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "requiredCapabilities" field.</summary>
    public const int RequiredCapabilitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_requiredCapabilities_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> requiredCapabilities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// What capabilities are required to handle the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RequiredCapabilities {
      get { return requiredCapabilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnqueueRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnqueueRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      if (Priority != other.Priority) return false;
      if(!requiredCapabilities_.Equals(other.requiredCapabilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      hash ^= requiredCapabilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
      if (Priority != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Priority);
      }
      requiredCapabilities_.WriteTo(output, _repeated_requiredCapabilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Priority);
      }
      size += requiredCapabilities_.CalculateSize(_repeated_requiredCapabilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnqueueRequest other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      requiredCapabilities_.Add(other.requiredCapabilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
          case 16: {
            priority_ = (global::brqueue.Priority) input.ReadEnum();
            break;
          }
          case 26: {
            requiredCapabilities_.AddEntriesFrom(input, _repeated_requiredCapabilities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnqueueResponse : pb::IMessage<EnqueueResponse> {
    private static readonly pb::MessageParser<EnqueueResponse> _parser = new pb::MessageParser<EnqueueResponse>(() => new EnqueueResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnqueueResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueResponse(EnqueueResponse other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnqueueResponse Clone() {
      return new EnqueueResponse(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The id of the created task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnqueueResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnqueueResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnqueueResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Removes a single message from the queue
  /// </summary>
  public sealed partial class PopRequest : pb::IMessage<PopRequest> {
    private static readonly pb::MessageParser<PopRequest> _parser = new pb::MessageParser<PopRequest>(() => new PopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopRequest(PopRequest other) : this() {
      availableCapabilities_ = other.availableCapabilities_.Clone();
      waitForMessage_ = other.waitForMessage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopRequest Clone() {
      return new PopRequest(this);
    }

    /// <summary>Field number for the "availableCapabilities" field.</summary>
    public const int AvailableCapabilitiesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_availableCapabilities_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> availableCapabilities_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// What capabilities the client has available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AvailableCapabilities {
      get { return availableCapabilities_; }
    }

    /// <summary>Field number for the "waitForMessage" field.</summary>
    public const int WaitForMessageFieldNumber = 2;
    private bool waitForMessage_;
    /// <summary>
    /// If the server should wait for a message to come in, before returning
    /// with a response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WaitForMessage {
      get { return waitForMessage_; }
      set {
        waitForMessage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!availableCapabilities_.Equals(other.availableCapabilities_)) return false;
      if (WaitForMessage != other.WaitForMessage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= availableCapabilities_.GetHashCode();
      if (WaitForMessage != false) hash ^= WaitForMessage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      availableCapabilities_.WriteTo(output, _repeated_availableCapabilities_codec);
      if (WaitForMessage != false) {
        output.WriteRawTag(16);
        output.WriteBool(WaitForMessage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += availableCapabilities_.CalculateSize(_repeated_availableCapabilities_codec);
      if (WaitForMessage != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopRequest other) {
      if (other == null) {
        return;
      }
      availableCapabilities_.Add(other.availableCapabilities_);
      if (other.WaitForMessage != false) {
        WaitForMessage = other.WaitForMessage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            availableCapabilities_.AddEntriesFrom(input, _repeated_availableCapabilities_codec);
            break;
          }
          case 16: {
            WaitForMessage = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PopResponse : pb::IMessage<PopResponse> {
    private static readonly pb::MessageParser<PopResponse> _parser = new pb::MessageParser<PopResponse>(() => new PopResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopResponse(PopResponse other) : this() {
      hadResult_ = other.hadResult_;
      message_ = other.message_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PopResponse Clone() {
      return new PopResponse(this);
    }

    /// <summary>Field number for the "hadResult" field.</summary>
    public const int HadResultFieldNumber = 3;
    private bool hadResult_;
    /// <summary>
    /// True if there was a message available
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HadResult {
      get { return hadResult_; }
      set {
        hadResult_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// The actual message to process
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    /// <summary>
    /// The id of the message
    /// Should be returned with the acknowledge request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HadResult != other.HadResult) return false;
      if (Message != other.Message) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HadResult != false) hash ^= HadResult.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Message);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (HadResult != false) {
        output.WriteRawTag(24);
        output.WriteBool(HadResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HadResult != false) {
        size += 1 + 1;
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PopResponse other) {
      if (other == null) {
        return;
      }
      if (other.HadResult != false) {
        HadResult = other.HadResult;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadBytes();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 24: {
            HadResult = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AcknowledgeRequest : pb::IMessage<AcknowledgeRequest> {
    private static readonly pb::MessageParser<AcknowledgeRequest> _parser = new pb::MessageParser<AcknowledgeRequest>(() => new AcknowledgeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcknowledgeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeRequest(AcknowledgeRequest other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeRequest Clone() {
      return new AcknowledgeRequest(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// The id of the message to acknowledge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcknowledgeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcknowledgeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcknowledgeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Returned when a message has been acknowledged
  /// </summary>
  public sealed partial class AcknowledgeResponse : pb::IMessage<AcknowledgeResponse> {
    private static readonly pb::MessageParser<AcknowledgeResponse> _parser = new pb::MessageParser<AcknowledgeResponse>(() => new AcknowledgeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AcknowledgeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeResponse(AcknowledgeResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AcknowledgeResponse Clone() {
      return new AcknowledgeResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AcknowledgeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AcknowledgeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AcknowledgeResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Write the full current queue back to the tpc stream
  /// As the response is not instant, it doesn't gaurantee that some
  /// of the messages hasn't been completed in the meantime, or
  /// that new messages has arrived
  /// </summary>
  public sealed partial class ListFullQueueRequest : pb::IMessage<ListFullQueueRequest> {
    private static readonly pb::MessageParser<ListFullQueueRequest> _parser = new pb::MessageParser<ListFullQueueRequest>(() => new ListFullQueueRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFullQueueRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFullQueueRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFullQueueRequest(ListFullQueueRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFullQueueRequest Clone() {
      return new ListFullQueueRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFullQueueRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFullQueueRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFullQueueRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// A partial response about a single message in the queue
  /// </summary>
  public sealed partial class ListFullQueueResponse : pb::IMessage<ListFullQueueResponse> {
    private static readonly pb::MessageParser<ListFullQueueResponse> _parser = new pb::MessageParser<ListFullQueueResponse>(() => new ListFullQueueResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFullQueueResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFullQueueResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFullQueueResponse(ListFullQueueResponse other) : this() {
      segmentIndex_ = other.segmentIndex_;
      message_ = other.message_;
      id_ = other.id_;
      finished_ = other.finished_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFullQueueResponse Clone() {
      return new ListFullQueueResponse(this);
    }

    /// <summary>Field number for the "segmentIndex" field.</summary>
    public const int SegmentIndexFieldNumber = 1;
    private int segmentIndex_;
    /// <summary>
    /// The index of this message, useful if the client wants to order messages
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SegmentIndex {
      get { return segmentIndex_; }
      set {
        segmentIndex_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private pb::ByteString message_ = pb::ByteString.Empty;
    /// <summary>
    /// The actual message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private string id_ = "";
    /// <summary>
    /// The id of the message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finished" field.</summary>
    public const int FinishedFieldNumber = 5;
    private bool finished_;
    /// <summary>
    /// If the listing has finished. When this is received, the
    /// rest of the fields doesn't make sense
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finished {
      get { return finished_; }
      set {
        finished_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFullQueueResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFullQueueResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SegmentIndex != other.SegmentIndex) return false;
      if (Message != other.Message) return false;
      if (Id != other.Id) return false;
      if (Finished != other.Finished) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SegmentIndex != 0) hash ^= SegmentIndex.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Finished != false) hash ^= Finished.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SegmentIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SegmentIndex);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Message);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Id);
      }
      if (Finished != false) {
        output.WriteRawTag(40);
        output.WriteBool(Finished);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SegmentIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SegmentIndex);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Finished != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFullQueueResponse other) {
      if (other == null) {
        return;
      }
      if (other.SegmentIndex != 0) {
        SegmentIndex = other.SegmentIndex;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Finished != false) {
        Finished = other.Finished;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SegmentIndex = input.ReadInt32();
            break;
          }
          case 26: {
            Message = input.ReadBytes();
            break;
          }
          case 34: {
            Id = input.ReadString();
            break;
          }
          case 40: {
            Finished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ErrorResponse : pb::IMessage<ErrorResponse> {
    private static readonly pb::MessageParser<ErrorResponse> _parser = new pb::MessageParser<ErrorResponse>(() => new ErrorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorResponse(ErrorResponse other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorResponse Clone() {
      return new ErrorResponse(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    /// <summary>
    /// What went wrong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorResponse other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Wraps the requests for easier parsing on the socket layer
  /// </summary>
  public sealed partial class RequestWrapper : pb::IMessage<RequestWrapper> {
    private static readonly pb::MessageParser<RequestWrapper> _parser = new pb::MessageParser<RequestWrapper>(() => new RequestWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWrapper(RequestWrapper other) : this() {
      refId_ = other.refId_;
      switch (other.MessageCase) {
        case MessageOneofCase.Enqueue:
          Enqueue = other.Enqueue.Clone();
          break;
        case MessageOneofCase.Pop:
          Pop = other.Pop.Clone();
          break;
        case MessageOneofCase.Acknowledge:
          Acknowledge = other.Acknowledge.Clone();
          break;
        case MessageOneofCase.ListFullQueue:
          ListFullQueue = other.ListFullQueue.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestWrapper Clone() {
      return new RequestWrapper(this);
    }

    /// <summary>Field number for the "refId" field.</summary>
    public const int RefIdFieldNumber = 10;
    private int refId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefId {
      get { return refId_; }
      set {
        refId_ = value;
      }
    }

    /// <summary>Field number for the "enqueue" field.</summary>
    public const int EnqueueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.EnqueueRequest Enqueue {
      get { return messageCase_ == MessageOneofCase.Enqueue ? (global::brqueue.EnqueueRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Enqueue;
      }
    }

    /// <summary>Field number for the "pop" field.</summary>
    public const int PopFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.PopRequest Pop {
      get { return messageCase_ == MessageOneofCase.Pop ? (global::brqueue.PopRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pop;
      }
    }

    /// <summary>Field number for the "acknowledge" field.</summary>
    public const int AcknowledgeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.AcknowledgeRequest Acknowledge {
      get { return messageCase_ == MessageOneofCase.Acknowledge ? (global::brqueue.AcknowledgeRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Acknowledge;
      }
    }

    /// <summary>Field number for the "listFullQueue" field.</summary>
    public const int ListFullQueueFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.ListFullQueueRequest ListFullQueue {
      get { return messageCase_ == MessageOneofCase.ListFullQueue ? (global::brqueue.ListFullQueueRequest) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ListFullQueue;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Enqueue = 1,
      Pop = 2,
      Acknowledge = 3,
      ListFullQueue = 4,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefId != other.RefId) return false;
      if (!object.Equals(Enqueue, other.Enqueue)) return false;
      if (!object.Equals(Pop, other.Pop)) return false;
      if (!object.Equals(Acknowledge, other.Acknowledge)) return false;
      if (!object.Equals(ListFullQueue, other.ListFullQueue)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefId != 0) hash ^= RefId.GetHashCode();
      if (messageCase_ == MessageOneofCase.Enqueue) hash ^= Enqueue.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pop) hash ^= Pop.GetHashCode();
      if (messageCase_ == MessageOneofCase.Acknowledge) hash ^= Acknowledge.GetHashCode();
      if (messageCase_ == MessageOneofCase.ListFullQueue) hash ^= ListFullQueue.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Enqueue) {
        output.WriteRawTag(10);
        output.WriteMessage(Enqueue);
      }
      if (messageCase_ == MessageOneofCase.Pop) {
        output.WriteRawTag(18);
        output.WriteMessage(Pop);
      }
      if (messageCase_ == MessageOneofCase.Acknowledge) {
        output.WriteRawTag(26);
        output.WriteMessage(Acknowledge);
      }
      if (messageCase_ == MessageOneofCase.ListFullQueue) {
        output.WriteRawTag(34);
        output.WriteMessage(ListFullQueue);
      }
      if (RefId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RefId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefId);
      }
      if (messageCase_ == MessageOneofCase.Enqueue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enqueue);
      }
      if (messageCase_ == MessageOneofCase.Pop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pop);
      }
      if (messageCase_ == MessageOneofCase.Acknowledge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acknowledge);
      }
      if (messageCase_ == MessageOneofCase.ListFullQueue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListFullQueue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestWrapper other) {
      if (other == null) {
        return;
      }
      if (other.RefId != 0) {
        RefId = other.RefId;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Enqueue:
          if (Enqueue == null) {
            Enqueue = new global::brqueue.EnqueueRequest();
          }
          Enqueue.MergeFrom(other.Enqueue);
          break;
        case MessageOneofCase.Pop:
          if (Pop == null) {
            Pop = new global::brqueue.PopRequest();
          }
          Pop.MergeFrom(other.Pop);
          break;
        case MessageOneofCase.Acknowledge:
          if (Acknowledge == null) {
            Acknowledge = new global::brqueue.AcknowledgeRequest();
          }
          Acknowledge.MergeFrom(other.Acknowledge);
          break;
        case MessageOneofCase.ListFullQueue:
          if (ListFullQueue == null) {
            ListFullQueue = new global::brqueue.ListFullQueueRequest();
          }
          ListFullQueue.MergeFrom(other.ListFullQueue);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::brqueue.EnqueueRequest subBuilder = new global::brqueue.EnqueueRequest();
            if (messageCase_ == MessageOneofCase.Enqueue) {
              subBuilder.MergeFrom(Enqueue);
            }
            input.ReadMessage(subBuilder);
            Enqueue = subBuilder;
            break;
          }
          case 18: {
            global::brqueue.PopRequest subBuilder = new global::brqueue.PopRequest();
            if (messageCase_ == MessageOneofCase.Pop) {
              subBuilder.MergeFrom(Pop);
            }
            input.ReadMessage(subBuilder);
            Pop = subBuilder;
            break;
          }
          case 26: {
            global::brqueue.AcknowledgeRequest subBuilder = new global::brqueue.AcknowledgeRequest();
            if (messageCase_ == MessageOneofCase.Acknowledge) {
              subBuilder.MergeFrom(Acknowledge);
            }
            input.ReadMessage(subBuilder);
            Acknowledge = subBuilder;
            break;
          }
          case 34: {
            global::brqueue.ListFullQueueRequest subBuilder = new global::brqueue.ListFullQueueRequest();
            if (messageCase_ == MessageOneofCase.ListFullQueue) {
              subBuilder.MergeFrom(ListFullQueue);
            }
            input.ReadMessage(subBuilder);
            ListFullQueue = subBuilder;
            break;
          }
          case 80: {
            RefId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResponseWrapper : pb::IMessage<ResponseWrapper> {
    private static readonly pb::MessageParser<ResponseWrapper> _parser = new pb::MessageParser<ResponseWrapper>(() => new ResponseWrapper());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseWrapper> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::brqueue.QueueReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseWrapper() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseWrapper(ResponseWrapper other) : this() {
      refId_ = other.refId_;
      switch (other.MessageCase) {
        case MessageOneofCase.Enqueue:
          Enqueue = other.Enqueue.Clone();
          break;
        case MessageOneofCase.Pop:
          Pop = other.Pop.Clone();
          break;
        case MessageOneofCase.Acknowledge:
          Acknowledge = other.Acknowledge.Clone();
          break;
        case MessageOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case MessageOneofCase.ListFullQueue:
          ListFullQueue = other.ListFullQueue.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseWrapper Clone() {
      return new ResponseWrapper(this);
    }

    /// <summary>Field number for the "refId" field.</summary>
    public const int RefIdFieldNumber = 10;
    private int refId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefId {
      get { return refId_; }
      set {
        refId_ = value;
      }
    }

    /// <summary>Field number for the "enqueue" field.</summary>
    public const int EnqueueFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.EnqueueResponse Enqueue {
      get { return messageCase_ == MessageOneofCase.Enqueue ? (global::brqueue.EnqueueResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Enqueue;
      }
    }

    /// <summary>Field number for the "pop" field.</summary>
    public const int PopFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.PopResponse Pop {
      get { return messageCase_ == MessageOneofCase.Pop ? (global::brqueue.PopResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pop;
      }
    }

    /// <summary>Field number for the "acknowledge" field.</summary>
    public const int AcknowledgeFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.AcknowledgeResponse Acknowledge {
      get { return messageCase_ == MessageOneofCase.Acknowledge ? (global::brqueue.AcknowledgeResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Acknowledge;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 4;
    /// <summary>
    /// If something went wrong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.ErrorResponse Error {
      get { return messageCase_ == MessageOneofCase.Error ? (global::brqueue.ErrorResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Error;
      }
    }

    /// <summary>Field number for the "listFullQueue" field.</summary>
    public const int ListFullQueueFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::brqueue.ListFullQueueResponse ListFullQueue {
      get { return messageCase_ == MessageOneofCase.ListFullQueue ? (global::brqueue.ListFullQueueResponse) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ListFullQueue;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      Enqueue = 1,
      Pop = 2,
      Acknowledge = 3,
      Error = 4,
      ListFullQueue = 5,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseWrapper);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseWrapper other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefId != other.RefId) return false;
      if (!object.Equals(Enqueue, other.Enqueue)) return false;
      if (!object.Equals(Pop, other.Pop)) return false;
      if (!object.Equals(Acknowledge, other.Acknowledge)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(ListFullQueue, other.ListFullQueue)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefId != 0) hash ^= RefId.GetHashCode();
      if (messageCase_ == MessageOneofCase.Enqueue) hash ^= Enqueue.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pop) hash ^= Pop.GetHashCode();
      if (messageCase_ == MessageOneofCase.Acknowledge) hash ^= Acknowledge.GetHashCode();
      if (messageCase_ == MessageOneofCase.Error) hash ^= Error.GetHashCode();
      if (messageCase_ == MessageOneofCase.ListFullQueue) hash ^= ListFullQueue.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (messageCase_ == MessageOneofCase.Enqueue) {
        output.WriteRawTag(10);
        output.WriteMessage(Enqueue);
      }
      if (messageCase_ == MessageOneofCase.Pop) {
        output.WriteRawTag(18);
        output.WriteMessage(Pop);
      }
      if (messageCase_ == MessageOneofCase.Acknowledge) {
        output.WriteRawTag(26);
        output.WriteMessage(Acknowledge);
      }
      if (messageCase_ == MessageOneofCase.Error) {
        output.WriteRawTag(34);
        output.WriteMessage(Error);
      }
      if (messageCase_ == MessageOneofCase.ListFullQueue) {
        output.WriteRawTag(42);
        output.WriteMessage(ListFullQueue);
      }
      if (RefId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RefId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefId);
      }
      if (messageCase_ == MessageOneofCase.Enqueue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Enqueue);
      }
      if (messageCase_ == MessageOneofCase.Pop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pop);
      }
      if (messageCase_ == MessageOneofCase.Acknowledge) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acknowledge);
      }
      if (messageCase_ == MessageOneofCase.Error) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (messageCase_ == MessageOneofCase.ListFullQueue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ListFullQueue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseWrapper other) {
      if (other == null) {
        return;
      }
      if (other.RefId != 0) {
        RefId = other.RefId;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.Enqueue:
          if (Enqueue == null) {
            Enqueue = new global::brqueue.EnqueueResponse();
          }
          Enqueue.MergeFrom(other.Enqueue);
          break;
        case MessageOneofCase.Pop:
          if (Pop == null) {
            Pop = new global::brqueue.PopResponse();
          }
          Pop.MergeFrom(other.Pop);
          break;
        case MessageOneofCase.Acknowledge:
          if (Acknowledge == null) {
            Acknowledge = new global::brqueue.AcknowledgeResponse();
          }
          Acknowledge.MergeFrom(other.Acknowledge);
          break;
        case MessageOneofCase.Error:
          if (Error == null) {
            Error = new global::brqueue.ErrorResponse();
          }
          Error.MergeFrom(other.Error);
          break;
        case MessageOneofCase.ListFullQueue:
          if (ListFullQueue == null) {
            ListFullQueue = new global::brqueue.ListFullQueueResponse();
          }
          ListFullQueue.MergeFrom(other.ListFullQueue);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::brqueue.EnqueueResponse subBuilder = new global::brqueue.EnqueueResponse();
            if (messageCase_ == MessageOneofCase.Enqueue) {
              subBuilder.MergeFrom(Enqueue);
            }
            input.ReadMessage(subBuilder);
            Enqueue = subBuilder;
            break;
          }
          case 18: {
            global::brqueue.PopResponse subBuilder = new global::brqueue.PopResponse();
            if (messageCase_ == MessageOneofCase.Pop) {
              subBuilder.MergeFrom(Pop);
            }
            input.ReadMessage(subBuilder);
            Pop = subBuilder;
            break;
          }
          case 26: {
            global::brqueue.AcknowledgeResponse subBuilder = new global::brqueue.AcknowledgeResponse();
            if (messageCase_ == MessageOneofCase.Acknowledge) {
              subBuilder.MergeFrom(Acknowledge);
            }
            input.ReadMessage(subBuilder);
            Acknowledge = subBuilder;
            break;
          }
          case 34: {
            global::brqueue.ErrorResponse subBuilder = new global::brqueue.ErrorResponse();
            if (messageCase_ == MessageOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 42: {
            global::brqueue.ListFullQueueResponse subBuilder = new global::brqueue.ListFullQueueResponse();
            if (messageCase_ == MessageOneofCase.ListFullQueue) {
              subBuilder.MergeFrom(ListFullQueue);
            }
            input.ReadMessage(subBuilder);
            ListFullQueue = subBuilder;
            break;
          }
          case 80: {
            RefId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
